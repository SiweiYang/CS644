#!/usr/bin/env bash

make

function joosc_run {
  ./joosc `find $1 -printf "%p\n"| grep "\.java$"` assignment_testcases/stdlib2/*.java
  status=$?
  if [ $status -ne 0 ]; then
    echo "Exit code: $status"
  fi
}
export -f joosc_run

function run_test {
  ./joosc $1 assignment_testcases/stdlib2/*.java 2>/dev/null
  if [ $? -ne 0 ]; then
    echo $1
  fi
}
export -f run_test

function run_test_dir {
  ./joosc `find $1 -printf "%p\n"| grep "\.java$"` assignment_testcases/stdlib2/*.java 2>/dev/null
  if [ $? -ne 0 ]; then
    echo $1
  fi
}
export -f run_test_dir

function run_bad_test {
  ./joosc $1 assignment_testcases/stdlib2/*.java 2>/dev/null
  if [ $? -ne 42 ]; then
    echo $1
  fi
}
export -f run_bad_test

function run_bad_test_dir {
  ./joosc `find $1 -printf "%p\n"| grep "\.java$"` assignment_testcases/stdlib2/*.java 2>/dev/null
  if [ $? -ne 42 ]; then
    echo $1
  fi
}
export -f run_bad_test_dir

echo "Running tests..."
echo "Failures:"

which parallel > /dev/null

if [ $? -ne 0 ]; then
  for file in $( echo assignment_testcases/a2/J[!e]*.java ); do
    run_test ${file}
  done

  for dir in $( ls -d assignment_testcases/a2/J[!e]*/ ); do
    run_test_dir $dir
  done

  for file in $( echo assignment_testcases/a2/Je*.java ); do
    run_bad_test $file
  done

  for dir in $( ls -d assignment_testcases/a2/Je*/ ); do
    run_bad_test_dir $dir
  done
else
  parallel run_test ::: assignment_testcases/a2/J[!e]*.java
  parallel run_test_dir ::: `ls -d assignment_testcases/a2/J[!e]*/`
  parallel run_bad_test ::: assignment_testcases/a2/Je*.java
  parallel run_bad_test_dir ::: `ls -d assignment_testcases/a2/Je*/`
fi
