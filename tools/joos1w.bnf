CompilationUnit:
  |PackageDeclaration| |ImportDeclarations| |TypeDeclaration|

Literal:
  LITERAL_INT
  LITERAL_BOOL
  LITERAL_CHAR
  LITERAL_STRING
  LITERAL_NULL

Type:
  PrimitiveType
  ReferenceType

PrimitiveType:
  IntegralType
<<<<<<< HEAD
  KEYWORD_BOOLEAN

IntegralType:
  KEYWORD_BYTE
  KEYWORD_SHORT
  KEYWORD_INT
  KEYWORD_CHAR
=======
  BOOLEAN

IntegralType:
  BYTE
  SHORT
  INT
  CHAR
>>>>>>> master

ReferenceType:
  ClassOrInterfaceType
  ArrayType

ClassOrInterfaceType:
  Name

ClassType:
  ClassOrInterfaceType

InterfaceType:
  ClassOrInterfaceType

ArrayType:
  PrimitiveType [ ]
  Name [ ]

Name:
  SimpleName
  QualifiedName

SimpleName:
  IDENTIFIER

QualifiedName:
  Name . IDENTIFIER

ImportDeclarations:
  ImportDeclaration
  ImportDeclarations ImportDeclaration

PackageDeclaration:
<<<<<<< HEAD
  KEYWORD_PACKGE Name ;
=======
  PACKGE Name ;
>>>>>>> master

ImportDeclaration:
  SingleTypeImportDeclaration
  TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:
<<<<<<< HEAD
  KEYWORD_IMPORT Name ;

TypeImportOnDemandDeclaration:
  KEYWORD_IMPORT Name . OPERATOR_STAR ;
=======
  IMPORT Name ;

TypeImportOnDemandDeclaration:
  IMPORT Name . * ;
>>>>>>> master

TypeDeclaration:
  ClassDeclaration
  InterfaceDeclaration
  ;

Modifiers:
<<<<<<< HEAD
  KEYWORD_MODIFIER
  Modifiers KEYWORD_MODIFIER

ClassDeclaration:
  |Modifiers| KEYWORD_CLASS IDENTIFIER |Super| |Interfaces| ClassBody

Super:
  KEYWORD_EXTENDS ClassType

Interfaces:
  KEYWORD_IMPLEMENTS InterfaceTypeList
=======
  MODIFIER
  Modifiers MODIFIER

ClassDeclaration:
  |Modifiers| CLASS IDENTIFIER |Super| |Interfaces| ClassBody

Super:
  EXTENDS ClassType

Interfaces:
  IMPLEMENTS InterfaceTypeList
>>>>>>> master

InterfaceTypeList:
  InterfaceType
  InterfaceTypeList , InterfaceType

ClassBody:
  { |ClassBodyDeclarations| }

ClassBodyDeclarations:
  ClassBodyDeclaration
  ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration:
  ClassMemberDeclaration
  StaticInitializer
  ConstructorDeclaration

ClassMemberDeclaration:
  FieldDeclaration
  MethodDeclaration

FieldDeclaration:
  |Modifiers| Type VariableDeclarator ;

VariableDeclarator:
  IDENTIFIER OPERATOR_ASSIGN Expression

MethodDeclaration:
  MethodHeader MethodBody

MethodHeader:
  |Modifiers| Type MethodDeclarator |Throws|
<<<<<<< HEAD
  |Modifiers| KEYWORD_VOID MethodDeclarator |Throws|
=======
  |Modifiers| VOID MethodDeclarator |Throws|
>>>>>>> master

MethodDeclarator:
  IDENTIFIER ( |FormalParameterList| )

FormalParameterList:
  FormalParameter
  FormalParameterList , FormalParameter

FormalParameter:
  Type IDENTIFIER

Throws:
<<<<<<< HEAD
  KEYWORD_THROWS ClassTypeList
=======
  THROWS ClassTypeList
>>>>>>> master

ClassTypeList:
  ClassType
  ClassTypeList , ClassType

MethodBody:
  Block
  ;
StaticInitializer:
<<<<<<< HEAD
  KEYWORD_STATIC Block
=======
  STATIC Block
>>>>>>> master

ConstructorDeclaration:
  |Modifiers| ConstructorDeclarator |Throws| ConstructorBody

ConstructorDeclarator:
  SimpleName ( |FormalParameterList| )

ConstructorBody:
  { |ExplicitConstructorInvocation| |BlockStatements| }

ExplicitConstructorInvocation:
<<<<<<< HEAD
  KEYWORD_THIS ( |ArgumentList| ) ;

InterfaceDeclaration:
  |Modifiers| KEYWORD_INTERFACE IDENTIFIER |ExtendsInterfaces| InterfaceBody

ExtendsInterfaces:
  KEYWORD_EXTENDS InterfaceType
=======
  THIS ( |ArgumentList| ) ;

InterfaceDeclaration:
  |Modifiers| INTERFACE IDENTIFIER |ExtendsInterfaces| InterfaceBody

ExtendsInterfaces:
  EXTENDS InterfaceType
>>>>>>> master
  ExtendsInterfaces , InterfaceType

InterfaceBody:
  { |InterfaceMemberDeclarations| }

InterfaceMemberDeclarations:
  InterfaceMemberDeclaration
  InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration:
  AbstractMethodDeclaration

AbstractMethodDeclaration:
  MethodHeader ;

Block:
  { |BlockStatements| }

BlockStatements:
  BlockStatement
  BlockStatements BlockStatement

BlockStatement:
  LocalVariableDeclarationStatement
  Statement

LocalVariableDeclarationStatement:
  LocalVariableDeclaration ;

LocalVariableDeclaration:
  Type VariableDeclarator

Statement:
  StatementWithoutTrailingSubstatement
  IfThenStatement
  IfThenElseStatement
  WhileStatement
  ForStatement

StatementNoShortIf:
  StatementWithoutTrailingSubstatement
  IfThenElseStatementNoShortIf
  WhileStatementNoShortIf
  ForStatementNoShortIf

StatementWithoutTrailingSubstatement:
  Block
  EmptyStatement
  ExpressionStatement
  ReturnStatement

EmptyStatement:
  ;

ExpressionStatement:
  StatementExpression ;

StatementExpression:
  Assignment
  MethodInvocation
  ClassInstanceCreationExpression

IfThenStatement:
<<<<<<< HEAD
  KEYWORD_IF ( Expression ) Statement

IfThenElseStatement:
  KEYWORD_IF ( Expression ) StatementNoShortIf ELSE Statement

IfThenElseStatementNoShortIf:
  KEYWORD_IF ( Expression ) StatementNoShortIf ELSE StatementNoShortIf

WhileStatement:
  KEYWORD_WHILE ( Expression ) Statement

WhileStatementNoShortIf:
  KEYWORD_WHILE ( Expression ) StatementNoShortIf

ForStatement:
  KEYWORD_FOR ( |LocalVariableDeclaration| ; |Expression| ; |StatementExpression| ) Statement

ForStatementNoShortIf:
  KEYWORD_FOR ( |LocalVariableDeclaration| ; |Expression| ; |StatementExpression| ) StatementNoShortIf

ReturnStatement:
  KEYWORD_RETURN |Expression| ;
=======
  IF ( Expression ) Statement

IfThenElseStatement:
  IF ( Expression ) StatementNoShortIf ELSE Statement

IfThenElseStatementNoShortIf:
  IF ( Expression ) StatementNoShortIf ELSE StatementNoShortIf

WhileStatement:
  WHILE ( Expression ) Statement

WhileStatementNoShortIf:
  WHILE ( Expression ) StatementNoShortIf

ForStatement:
  FOR ( |LocalVariableDeclaration| ; |Expression| ; |StatementExpression| ) Statement

ForStatementNoShortIf:
  FOR ( |LocalVariableDeclaration| ; |Expression| ; |StatementExpression| ) StatementNoShortIf

ReturnStatement:
  RETURN |Expression| ;
>>>>>>> master

Primary:
  PrimaryNoNewArray
  ArrayCreationExpression

PrimaryNoNewArray:
  Literal
<<<<<<< HEAD
  KEYWORD_THIS
=======
  THIS
>>>>>>> master
  ( Expression )
  ClassInstanceCreationExpression
  FieldAccess
  MethodInvocation
  ArrayAccess

ClassInstanceCreationExpression:
<<<<<<< HEAD
  KEYWORD_NEW ClassType ( |ArgumentList| )
=======
  NEW ClassType ( |ArgumentList| )
>>>>>>> master

ArgumentList:
  Expression
  ArgumentList , Expression

ArrayCreationExpression:
<<<<<<< HEAD
  KEYWORD_NEW PrimitiveType DimExprs |Dims|
  KEYWORD_NEW ClassOrInterfaceType DimExprs |Dims|
=======
  NEW PrimitiveType DimExprs |Dims|
  NEW ClassOrInterfaceType DimExprs |Dims|
>>>>>>> master

DimExprs:
  DimExpr
  DimExprs DimExpr

DimExpr:
  [ Expression ]

Dims:
  [ ]
  Dims [ ]

FieldAccess:
  Primary . IDENTIFIER

MethodInvocation:
  Name ( |ArgumentList| )
  Primary . IDENTIFIER ( |ArgumentList| )

ArrayAccess:
  Name [ Expression ]
  PrimaryNoNewArray [ Expression ]

PostfixExpression:
  Primary
  Name

UnaryExpression:
<<<<<<< HEAD
  OPERATOR_- UnaryExpression
=======
  - UnaryExpression
>>>>>>> master
  UnaryExpressionNotPlusMinus

UnaryExpressionNotPlusMinus:
  PostfixExpression
<<<<<<< HEAD
  OPERATOR_! UnaryExpression
=======
  NOT UnaryExpression
>>>>>>> master
  CastExpression

CastExpression:
  ( PrimitiveType |Dims| ) UnaryExpression
  ( Expression ) UnaryExpressionNotPlusMinus
  ( Name Dims ) UnaryExpressionNotPlusMinus

MultiplicativeExpression:
  UnaryExpression
<<<<<<< HEAD
  MultiplicativeExpression MultiplicativeOperator UnaryExpression

MultiplicativeOperator:
  OPERATOR_*
  OPERATOR_/
  OPERATOR_%

AdditiveExpression:
  MultiplicativeExpression
  AdditiveExpression AdditiveOperator MultiplicativeExpression

AdditiveOperator:
  OPERATOR_+
  OPERATOR_-

RelationalExpression:
  AdditiveExpression
  RelationalExpression CompareOperator AdditiveExpression
  RelationalExpression KEYWORD_INSTANCEOF ReferenceType

CompareOperator:
  OPERATOR_<
  OPERATOR_>
  OPERATOR_<=
  OPERATOR_>=
  OPERATOR_!=

EqualityExpression:
  RelationalExpression
  EqualityExpression OPERATOR_== RelationalExpression

ConditionalAndExpression:
  EqualityExpression
  ConditionalAndExpression AndOperator EqualityExpression

AndOperator:
  OPERATOR_&
  OPERATOR_&&

ConditionalOrExpression:
  ConditionalAndExpression
  ConditionalOrExpression OrOperator ConditionalAndExpression

OrOperator:
  OPERATOR_|
  OPERATOR_||
=======
  MultiplicativeExpression OPERATOR_MULTIPLICATIVE UnaryExpression

AdditiveExpression:
  MultiplicativeExpression
  AdditiveExpression OPERATOR_ADDITIVE MultiplicativeExpression

RelationalExpression:
  AdditiveExpression
  RelationalExpression OPERATOR_COMPARE AdditiveExpression
  RelationalExpression INSTANCEOF ReferenceType

EqualityExpression:
  RelationalExpression
  EqualityExpression OPERATOR_EQUALITY RelationalExpression

ConditionalAndExpression:
  EqualityExpression
  ConditionalAndExpression OPERATOR_AND EqualityExpression

ConditionalOrExpression:
  ConditionalAndExpression
  ConditionalOrExpression OPERATOR_OR ConditionalAndExpression
>>>>>>> master

ConditionalExpression:
  ConditionalOrExpression

AssignmentExpression:
  ConditionalExpression
  Assignment

Assignment:
<<<<<<< HEAD
  LeftHandSide OPERATOR_= AssignmentExpression
=======
  LeftHandSide OPERATOR_ASSIGN AssignmentExpression
>>>>>>> master

LeftHandSide:
  Name
  FieldAccess
  ArrayAccess

Expression:
  AssignmentExpression
